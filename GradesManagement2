#pragma warning(disable : 4996)
#include <iostream>
#include <cstdlib>
#include <cstring>
#include <fstream>
#include <algorithm>
#include <tchar.h>
#include <conio.h>
#define DATA_FILE_NAME "outputData.txt" //파일명 기호상수화
#define NUMBER_OF_SUBJECTS 3 //과목수
#define NUMBER_OF_STUDENTS 5 //학생수
using namespace std;

#if defined UNICODE || defined _UNICODE //한글 입력했을 때 대비해서 유니코드 해줌
#define tcout std::wcout 
#define tcin std::wcin 
#define tofstream std::wofstream
#else 
#define tcout std::cout 
#define tcin std::cin
#define tofstream std::ofstream
#endif

class Person
{
public:
	Person() : name(nullptr), flag(0) //학생의 이름을 매개변수로 받음
	{
		name = new _TCHAR[32]; //메모리 동적할당
	}

	explicit Person(const _TCHAR* pszName) : name(nullptr), flag(0) //학생의 이름을 매개변수로 받음
	{
		name = new _TCHAR[32]; //메모리 동적할당
		_tcscpy(name, pszName); //받은 이름을 저장
	}

	~Person()
	{
		if (flag)
		{
			delete[] name; //메모리 해제
		}
	}

protected:
	void SetName(const _TCHAR* szName) //이름을 설정하는 메소드
	{
		_tcscpy(name, szName);		
	}

	void SetFlag(int f)
	{
		flag = f;
	}

	virtual void showData() = 0; //학생들의 정보를 출력할 순수가상함수

protected:
	_TCHAR* name; //학생의 이름
	int flag; //동적할당 메모리 해제 판단용
};


class Student : public Person //Person클래스를 상속
{
public:
	Student() : Person() //생성자 선택, 기본생성자
	{
		//각종 멤버 변수들 초기화
		m_dAverage = 0;
		m_dSum = 0;
		m_dGrades = new double[NUMBER_OF_SUBJECTS];
	}

	Student(const Student& rhs) : Person(rhs.name) //복사생성자, 매개변수로 받은 클래스의 이름을 Person클래스로 넘김
	{
		//각종 매개변수를 옮김
		m_dSum = rhs.m_dSum;
		m_dAverage = rhs.m_dAverage;
		m_dGrades = new double[NUMBER_OF_SUBJECTS];

		for (int i = 0; i < NUMBER_OF_SUBJECTS; i++)
		{
			m_dGrades[i] = rhs.m_dGrades[i];
		}


	}

	~Student()
	{
		if (flag)
		{
			delete[] m_dGrades; //동적 할당된 메모리 해제
		}
	}

	void Results() //총합 계산
	{
		for (int i = 0; i < NUMBER_OF_SUBJECTS; i++)
		{
			m_dSum += m_dGrades[i];
		}
	}

	void Average() //평균 계산
	{
		m_dAverage = m_dSum / NUMBER_OF_SUBJECTS;

	}

	virtual void showData() //학생의 데이터 보여줌
	{
		tofstream fout;

		fout.open(DATA_FILE_NAME, ios::app); //이어쓰기로 파일 열기

		fout << " ";

		fout.write(name, _tcslen(name)); //학생의 이름 출력

		fout << " ";

		//소수점 자리 설정
		fout.setf(ios::showpoint);
		fout.precision(4);

		for (int i = 0; i < NUMBER_OF_SUBJECTS; i++) //학생의 성적 출력
		{
			fout << "|   " << m_dGrades[i] << "   ";
		}

		fout << "|   " << m_dSum << "   "; //합계출력
		fout << "|   " << m_dAverage << "   " << endl; //평균 출력


		studentCount--; //학생의 정보가 출력되었다는 의미에서 하나 줄임

		if (studentCount == 0) //마지막 학생의 정보까지 다 출력을 하면 마무리 라인 그어줌.
		{
			fout << "-----------------------------------------------------------------" << endl;
		}


		fout.close(); //파일 닫기


	}


	static void showUI() //과목 보여주는 메소드, 각 객체마다 달라지는 것이 아니라 정적함수로 선언 및 정의
	{

		ofstream fout;

		fout.open(DATA_FILE_NAME, ios::out); //새로 쓰기로 파일열기

		fout << "=========================================" << endl;


		fout << "   성명  |   국어    |   영어    |    수학    |   총점    |  평균 " << endl;


		fout << "-----------------------------------------------------------------" << endl;


		fout.close(); //파일 닫기

	}

	friend int PrintMenu(Student rhs[]); //메뉴를 출력할 함수
	friend bool CompareStudents(Student& rhs1, Student& rhs2); //총합의 비교 기준이 될 함수
	friend void SearchStudents(Student rhs[], int size); //학생의 성적을 검색할 함수
	friend void SortStudents(Student rhs[], int size); //학생의 성적을 정렬할 함수
	friend void SetStudentGrades(Student rhs[], int sizeStudent, int sizeSubject); //학생의 성적을 설정하는 함수




private:
	double* m_dGrades; //성적을 저장할 포인터
	double m_dSum; //총합을 저장할 변수
	double m_dAverage; //평균을 저장할 변수
	static int studentCount; //생성된 학생의 수를 세기 위한 정적 멤버
};

int Student::studentCount = 0;

int PrintMenu(Student rhs[]) //메뉴를 출력
{
	int nMenu = 0; //메뉴를 입력 받을 지역변수

	cout << "메뉴를 선택하세요!" << endl;
	cout << "1.학생성적 등록" << endl;
	cout << "2.정렬" << endl;
	cout << "3.검색" << endl;
	cout << "4.종료" << endl;
	cin >> nMenu; //메뉴를 입력받음

	switch (nMenu) //선택한 메뉴에 따라 기능선택
	{
	case 1:
		SetStudentGrades(rhs, NUMBER_OF_STUDENTS, NUMBER_OF_SUBJECTS);
		return 1;
	case 2:
		SortStudents(rhs, NUMBER_OF_STUDENTS);
		return 1;
	case 3:
		SearchStudents(rhs, NUMBER_OF_STUDENTS);
		return 1;
	case 4:
		cout << "프로그램을 종료합니다!" << endl;
		_getch();

		for (int i = 0; i < NUMBER_OF_STUDENTS; i++)
		{
			rhs[i].SetFlag(1);
		}

		return 0;
	default:
		cout << "잘못된 메뉴를 입력하셨습니다." << endl;
		cout << "프로그램을 종료합니다!" << endl;
		_getch();

		for (int i = 0; i < NUMBER_OF_STUDENTS; i++)
		{
			rhs[i].SetFlag(1);
		}

		return 0;
	}
}

bool CompareStudents(Student& rhs1, Student& rhs2) //sort함수를 위한 비교함수
{
	return rhs1.m_dSum < rhs2.m_dSum;
}

void SortStudents(Student rhs[], int size)
{

	if (Student::studentCount != size) //정렬을 하기 전에 학생들읠 정봐 다 입력됐는지 확인
	{
		cout << "정렬을 하기 위해서는 학생들의 정보를 모두 입력해야합니다." << endl;
		_getch();
		return;
	}


	sort(&rhs[0], &rhs[size], CompareStudents); //정렬

	ofstream fout;

	Student::showUI(); //UI 출력

	for (int i = 0; i < size; i++) //각 객체의 정보 출력
	{
		rhs[i].showData();
	}

	system("notepad.exe outputData.txt"); //메모장 열어서 보여줌


	Student::studentCount += size; //showData에서 count가 0까지 줄어들기 때문에 cout를 다시 원래대로 돌려줌
}



void SearchStudents(Student rhs[], int size) //학생의 이름을 검색하는 함수
{
	int tmp = Student::studentCount; //tmp에 count를 넣음
	_TCHAR szName[32] = { 0 }; //검색할 이름 저장할 변수
	int i = 0;

	if (Student::studentCount == 0) //count가 0이면 오류 출력
	{
		cout << "입력된 학생 정보가 없습니다." << endl;
		_getch();
		return;
	}

	cout << "검색하실 이름을 입력하세요: "; //이름 입력
	tcin >> szName;

	for (i = 0; i < size; i++) 
	{
		if (_tcscmp(rhs[i].name, szName) == 0) //찾는 이름과 저장된 이름들 비교해서 찾으면
		{
			Student::studentCount = 1; //count를 1로 해줌, 왜냐하면 showData에서 count를 줄이고 0이 되어야 마지막 라인를 출력하기 때문
			Student::showUI(); //UI 출력
			rhs[i].showData(); //데이터 출력
		}
		else if (i == size-1 && Student::studentCount != 0) //끝까지 탐색했는데 정보가 없으면
		{
			cout << "찾으시는 학생 정보가 없습니다." << endl; //오류 출력
			_getch();
			return;
		}
	}



	system("notepad.exe outputData.txt"); //메모장 열어서 보여줌

	Student::studentCount = tmp; //count를 다시 원래대로 해줌
}


void SetStudentGrades(Student rhs[], int sizeStudent, int sizeSubject) //성적 입력
{
	Student::studentCount++; //학생의 데이터가 생성됐다는 것을 나타내기 위해 1 증가
	_TCHAR szName[32] = { 0 };
	int i = 0;

	if (Student::studentCount > sizeStudent) //학생 수보다 더 많이 입력하려고 하면 막음
	{
		cout << "성적을 이미 다 입력하셨습니다." << endl;
		Student::studentCount--;
		_getch();
		return;
	}

	cout << "학생의 이름을 입력하시오: ";
	tcin >> szName;

	for (i = 0; i < sizeStudent; i++) //이미 입력된 이름인지 확인
	{
		if (_tcscmp(rhs[i].name, szName) == 0) //이미 입력된 이름이면 오류 문구 출력
		{
			cout << "이미 입력된 학생입니다." << endl;
			Student::studentCount--;
			_getch();
			return;
		}
	}

	rhs[Student::studentCount - 1].SetName(szName); //이름 설정

	for (i = 0; i < sizeSubject; i++) //과목 점수 입력 받음
	{
		tcout << rhs[Student::studentCount - 1].name << "의 " << i + 1 << "번째 과목의 점수를 입력하세요 : ";
		cin >> rhs[Student::studentCount - 1].m_dGrades[i];
	}

	rhs[Student::studentCount - 1].Results(); //합계 계산
	rhs[Student::studentCount - 1].Average(); //평균 계산


	cout << endl;

}

int main()
{
	Student a[NUMBER_OF_STUDENTS]; //배열로 5명의 학생의 객체를 만듬

	while (PrintMenu(a))
	{
		system("cls"); //화면청소
	}

	return 0;
}
