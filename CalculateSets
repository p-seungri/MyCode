#include <iostream>
#include <vector>
#include <initializer_list>
using namespace std;

class Set
{
public:
	Set() : m_nSets(0), m_nSize(0)
	{
	}

	Set(initializer_list<int> sets, ...) //가변 매개변수로 받아서
	{
		for(auto n : sets) //배열에 요소 추가
		{
			m_nSets.push_back(n);
		}		

		m_nSize = m_nSets.size(); //사이즈 설정
	}

	Set(const Set& rhs) //복사생성자
	{
		for (auto n : rhs.m_nSets) //배열에 요소 추가
		{
			m_nSets.push_back(n);
		}

		m_nSize = rhs.m_nSize; //사이즈 설정
	}


	void GetIntersection(const Set& rhs) const//교집합 구하는 메소드
	{
		Set tmp;

		for (auto n : m_nSets)
		{
			for(auto m : rhs.m_nSets)
			{
				if ( n == m) //배열을 순회하여 값이 같으면
				{
					tmp.m_nSets.push_back(n); //값 추가
					
				}
			}
		}

		tmp.PrintSet(); //출력

	}


	void GetUnion(const Set& rhs) const//합집합 구하는 메소드
	{
		Set tmp(*this); //임시로 쓸 객체에 현재 객체를 대입
		vector<int>::iterator iter = tmp.m_nSets.begin(); //반복자에 tmp에 있는 배열의 처음 위치를 넣음.
		int count = 0;

		for (int i = 0; i < m_nSize; i++) //차집합을 하는 과정
		{
			for (int j = 0; j < rhs.m_nSize; j++)
			{
				if (m_nSets[i] == rhs.m_nSets[j]) //배열을 순회하면서 같은 값을 찾으면
				{
					iter += i-count; //반복자에서 i-count만큼 더함.
					tmp.m_nSets.erase(iter); //그 위치에 있는 요소 삭제
					iter = tmp.m_nSets.begin(); //반복자를 다시 처음 위치로 설정해줌.
					count++; //카운트 증가
				}
			}
		}


		for (auto n : rhs.m_nSets) //차집합한 객체에 매개변수로 받은 객체의 요소들을 추가함.
		{
			tmp.m_nSets.push_back(n);
		}


		tmp.PrintSet(); //출력

	}

	void GetDifference(const Set& rhs) const//차집합을 구하는 메소드, 위과 같이에 생략
	{
		Set tmp(*this);
		vector<int>::iterator iter = tmp.m_nSets.begin();
		int count = 0;
		

		for (int i = 0; i < m_nSize; i++) 
		{
			for (int j = 0; j < rhs.m_nSize; j++)
			{
				if (m_nSets[i] == rhs.m_nSets[j])
				{
					iter += i - count;
					tmp.m_nSets.erase(iter);
					iter = tmp.m_nSets.begin();
					count++;
				}
			}
		}

		tmp.PrintSet();

	}

	void PrintSet() const //배열의 요소를 출력하는 메소드
	{
		for (auto n : m_nSets)
		{
			cout << n << " ";
		}

		cout << endl << endl;;
	}

private:
	vector<int> m_nSets;
	int m_nSize;
};

int main()
{
	Set s1 = { 1, 5, 7, 11 };
	Set s2 = { 7, 1, 12, 3, 8 };
	
	cout << "집합 s1의 값" << endl;
	s1.PrintSet();

	cout << "집합 s2의 값" << endl;
	s2.PrintSet();

	cout << "s1과 s2의 교집합" << endl;
	s1.GetIntersection(s2);

	cout << "s1과 s2의 합집합" << endl;
	s1.GetUnion(s2);

	cout << "s1에서 s2를 차집합" << endl;
	s1.GetDifference(s2);

	return 0;
}
